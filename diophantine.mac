/*
solves linear and quadratic diophantine equations with constant integer coefficients.
based on dario alpern's solution, see https://www.alpertron.com.ar/QUAD.HTM
usage:
  load(diophantine);
  diophantine_solve(3*x^2+2*y-3);
*/

dio_error_2_vars:"Can only solve equations in 2 unknowns, found";
dio_error_integer_coeffs:"All coefficients should be integers";
dio_error_hi_pow:"Can only solve equations of degree 2 or less";
dio_error_no_unknowns:"No unknowns to solve for";
dio_error_not_implemented:"Can't solve this type of diophantine equation (yet?)";

/* a*x^2 + b*x*y + c*y^2 + d*x + e*y + f */

load(to_poly_solve);
load(dio_lisp_helpers);

dio_gensym():='%n;

diophantine_solve_single_var(dio_eq):=block([sols:solve(dio_eq),result:[]],
  for sol in sols do if integerp(rhs(sol)) then push([sol],result),
  result);

dio_gen_euclid(d,e):=block([v:[0,1,e],u:[1,0,d],t:0,q:0],
  for t:0 while v[3] # 0 do block([],
    q:floor(u[3]/v[3]),
    t:u-q*v,
    u:v,
    v:t),
  [u,v]);

diophantine_solve_linear(x,y,d,e,f):=block(
  if (d = 0 and e # 0) then
    block(if (integerp(f/e)) then [[y=-f/e]])
  elseif (d # 0 and e = 0) then
    block(if (integerp(f/d)) then [[x=-f/d]])
  else block([g:gcd(d,e)],
    if (mod(f,g) # 0) then []
    else
    block([uv:dio_gen_euclid(d,e),n:dio_gensym()],
      block([xi:-uv[1][1]*f/uv[1][3], xl:e,
             yi:-uv[1][2]*f/uv[1][3], yl:-d, tx:0],
        uv[2][1]:d*d+e*e,
        tx:floor(((d*yi-e*xi)+uv[2][1]/2)/uv[2][1]),
        xi:xi+e*tx,
        yi:yi-d*tx,
        if (xl<0 and yl<0) then block(xl:-xl,yl:-yl),
        [[x=xi+n*xl,y=yi+n*yl]]))));

dio_integer_expressions(xexpr, yexpr, vals):=block([_e, result:[]],
  for _e in first(rest(vals)) do block([sx:subst(first(vals)=_e, xexpr), sy:subst(first(vals)=_e, yexpr)],
    if integerp(rhs(sx)) and integerp(rhs(sy)) then
    push([sx, sy], result)),
  reverse(result));

diophantine_solve_simple_hyperbolic(x, y, b, d, e, f):=block(
  if (d*e-b*f=0) then block(
    if integerp(e/b) then [[x = -e/b, y = dio_gensym()]]
    elseif integerp(d/b) then [[x = dio_gensym(), y = -d/b]]
    else [])
  else block([divs: listify(divisors(d*e-b*f)), v],
    append(
      dio_integer_expressions(x = (v-e)/b, y = ((d*e-b*f)/v-d)/b, [v, divs]),
      dio_integer_expressions(x = (-v-e)/b, y = ((-d*e+b*f)/v-d)/b, [v, divs]))));

diophantine_solve_elliptic(x, y, a, b, c, d, e, f):=block([roots:solve((b^2-4*a*c)*x^2+2*(b*e-2*c*d)*x+(e^2-4*c*f),x), iroots],
  if length(roots) < 2 then return([]),
  iroots:map(rhs,roots),
  if not (isreal_p(iroots[1]) and isreal_p(iroots[2])) then return([]),
  iroots:map(truncate,iroots),
  if iroots[1] > iroots[2] then iroots:[iroots[2],iroots[1]],
  block([roots:makelist(i,i,iroots[1],iroots[2]), v],
    append(
      dio_integer_expressions(x = v, y = (-(b*v+e)+sqrt((b*v+e)^2-4*c*(a*v^2+d*v+f)))/(2*c), [v, roots]),
      dio_integer_expressions(x = v, y = (-(b*v+e)-sqrt((b*v+e)^2-4*c*(a*v^2+d*v+f)))/(2*c), [v, roots]))));

diophantine_solve_parabolic(x, y, a, b, c, d, e, f):=block([g:gcd(a,c),ag,bg,cg,qa,qc,qcdqae],
  ag:abs(a/g),
  bg:b/g,
  cg:abs(c/g),
  qa:sqrt(ag),
  if a = 0 then return([]),
  qc:sqrt(cg)*signum(b/a),
  qcdqae:qc*d-qa*e,
  if qcdqae = 0 then block([u,usols],
    usols:solve(qa*g*u^2+d*u+qa*f,u),
    block([result:[],u1:-rhs(usols[1]),u2:-rhs(usols[2])],
      if integerp(u1) then push(diophantine_solve_linear(x, y, qa, qc, u1)[1], result),
      if integerp(u2) then push(diophantine_solve_linear(x, y, qa, qc, u2)[1], result),
      result))
  else block([un:abs(qcdqae),u,result:[]],
    for u:0 thru un do block(
      if mod(qa*g*u^2+d*u+qa*f,qc*d-qa*e) = 0 then block([
        xv:qc*g*(qa*e-qc*d)*dio_gensym()^2-(e+2*qc*g*u)*dio_gensym()-(qc*g*u^2+e*u+qc*f)/qcdqae,
        yv:qa*g*qcdqae*dio_gensym()^2+(d+2*qa*g*u)*dio_gensym()+(qa*g*u^2+d*u+qa*f)/qcdqae],
        push([x = xv, y = yv], result))),
          reverse(result)));

diophantine_solve_hyperbolic_homogenous(x, y, a, b, c, f):=block([b2m4ac:b^2-4*a*c,isq],
  isq:isqrt(b2m4ac),
  if isq^2 = b2m4ac then block(
    if (f = 0) then
    append(diophantine_solve(2*a*x+ (b + isq)*y), diophantine_solve(2*a*x+(b - isq)*y))
    else block([divs:listify(divisors(-4*a*f))],
      dio_integer_expressions(x = (u-(b+isq)*(u+4*a*f/u)/2/isq)/2/a, y = (u + 4*a*f/u)/2/isq, [u, append(divs, -1*divs)])))
  else block([g:gcd(gcd(a,b),c)],
    if integerp(f/g) then  block([a:a/g,b:b/g,c:c/g,f:f/g],
      if 4*f^2<b2m4ac then block(
        )
      else block (
        ))));

diophantine_solve_hyperbolic(x, y, a, b, c, d, e, f):=block(
  if d = 0 and e = 0 then
    diophantine_solve_hyperbolic_homogenous(x, y, a, b, c, f)
  else
    working_on_it);

diophantine_solve(dio_eq) := nested_sort(diophantine_solve1(dio_eq));

nested_sort (l) :=
  if listp(l)
    then sort (map (lambda ([l1], if listp(l1) then sort(l1) else l1), l))
    else l;

diophantine_solve1(dio_eq):=if op(dio_eq) = "=" then diophantine_solve1(lhs(dio_eq)-rhs(dio_eq)) else
block([vars:listofvars(dio_eq)],
  if length(vars) > 2 then error (dio_error_2_vars, vars)
  elseif length(vars) = 1 then return(diophantine_solve_single_var(dio_eq))
  elseif length(vars) = 0 then error(dio_error_no_unknowns),
  block([x:vars[1],y:vars[2]],
    if (hipow(dio_eq, x)>2 or hipow(dio_eq, y)>2) then
      error(dio_error_hi_pow)
    else
    block([a:coeff(dio_eq,x^2),
      b:coeff(coeff(dio_eq,x),y),
      c:coeff(dio_eq, y^2),
      d:subst(y=0, coeff(dio_eq, x)),
      e:subst(x=0,coeff(dio_eq,y)),
      f:subst([x=0,y=0],dio_eq)],
      map(":",['a,'b,'c,'d,'e,'f],rest(ezgcd(a,b,c,d,e,f))),
      if not every(integerp, {a,b,c,d,e,f}) then
        error (dio_error_integer_coeffs)
      elseif (a = 0 and b = 0 and c = 0) then
        diophantine_solve_linear(x, y, d, e, f)
      elseif (a = 0 and c = 0 and b # 0) then
        diophantine_solve_simple_hyperbolic(x, y, b, d, e, f)
      elseif b^2-4*a*c < 0 then
        diophantine_solve_elliptic(x, y, a, b, c, d, e, f)
      elseif b^2-4*a*c = 0 then
        diophantine_solve_parabolic(x, y, a, b, c, d, e, f)
      else
        diophantine_solve_hyperbolic(x, y, a, b, c, d, e, f))));
