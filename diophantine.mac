/*
solves linear and quadratic diophantine equations with constant integer coefficients.
based on dario alpern's solution, see https://www.alpertron.com.ar/QUAD.HTM
usage:
  load(diophantine);
  diophantine_solve(3*x^2+2*y-3);
*/

dio_error_2_vars:"Can only solve equations in 2 unknowns, found";
dio_error_integer_coeffs:"All coefficients should be integers";
dio_error_hi_pow:"Can only solve equations of degree 2 or less";
dio_error_no_unknowns:"No unknowns to solve for";
dio_error_not_implemented:"Can't solve this type of diophantine equation (yet?)";

/* a*x^2 + b*x*y + c*y^2 + d*x + e*y + f */

load(to_poly_solve);
load(dio_lisp_helpers);
load(functs);

dio_gensym():='%n;

diophantine_solve_single_var(dio_eq):=block([sols:solve(dio_eq),result:[]],
  for sol in sols do if integerp(rhs(sol)) then push([sol],result),
  result);

dio_gen_euclid(d,e):=block([v:[0,1,e],u:[1,0,d],t:0,q:0],
  for t:0 while v[3] # 0 do block([],
    q:floor(u[3]/v[3]),
    t:u-q*v,
    u:v,
    v:t),
  [u,v]);

diophantine_solve_linear(x,y,d,e,f):=block(
  if (d = 0 and e # 0) then
    block(if (integerp(f/e)) then [[y=-f/e]])
  elseif (d # 0 and e = 0) then
    block(if (integerp(f/d)) then [[x=-f/d]])
  else block([g:gcd(d,e)],
    if (mod(f,g) # 0) then []
    else
    block([uv:dio_gen_euclid(d,e),n:dio_gensym()],
      block([xi:-uv[1][1]*f/uv[1][3], xl:e,
             yi:-uv[1][2]*f/uv[1][3], yl:-d, tx:0],
        uv[2][1]:d*d+e*e,
        tx:floor(((d*yi-e*xi)+uv[2][1]/2)/uv[2][1]),
        xi:xi+e*tx,
        yi:yi-d*tx,
        if (xl<0 and yl<0) then block(xl:-xl,yl:-yl),
        [[x=xi+n*xl,y=yi+n*yl]]))));

dio_integer_expressions(xexpr, yexpr, vals):=block([_e, result:[]],
  for _e in first(rest(vals)) do block([sx:subst(first(vals)=_e, xexpr), sy:subst(first(vals)=_e, yexpr)],
    if integerp(rhs(sx)) and integerp(rhs(sy)) then
    push([sx, sy], result)),
  reverse(result));

diophantine_solve_simple_hyperbolic(x, y, b, d, e, f):=block(
  if (d*e-b*f=0) then block(
    if integerp(e/b) then [[x = -e/b, y = dio_gensym()]]
    elseif integerp(d/b) then [[x = dio_gensym(), y = -d/b]]
    else [])
  else block([divs: listify(divisors(d*e-b*f)), v],
    append(
      dio_integer_expressions(x = (v-e)/b, y = ((d*e-b*f)/v-d)/b, [v, divs]),
      dio_integer_expressions(x = (-v-e)/b, y = ((-d*e+b*f)/v-d)/b, [v, divs]))));

diophantine_solve_elliptic(x, y, a, b, c, d, e, f):=block([roots:solve((b^2-4*a*c)*x^2+2*(b*e-2*c*d)*x+(e^2-4*c*f),x), iroots],
  if length(roots) < 2 then return([]),
  iroots:map(rhs,roots),
  if not (isreal_p(iroots[1]) and isreal_p(iroots[2])) then return([]),
  iroots:map(truncate,iroots),
  if iroots[1] > iroots[2] then iroots:[iroots[2],iroots[1]],
  block([roots:makelist(i,i,iroots[1],iroots[2]), v],
    append(
      dio_integer_expressions(x = v, y = (-(b*v+e)+sqrt((b*v+e)^2-4*c*(a*v^2+d*v+f)))/(2*c), [v, roots]),
      dio_integer_expressions(x = v, y = (-(b*v+e)-sqrt((b*v+e)^2-4*c*(a*v^2+d*v+f)))/(2*c), [v, roots]))));

diophantine_solve_parabolic(x, y, a, b, c, d, e, f):=block([g:gcd(a,c),ag,bg,cg,qa,qc,qcdqae],
  ag:abs(a/g),
  bg:b/g,
  cg:abs(c/g),
  qa:sqrt(ag),
  if a = 0 then return([]),
  qc:sqrt(cg)*signum(b/a),
  qcdqae:qc*d-qa*e,
  if qcdqae = 0 then block([u,usols],
    usols:solve(qa*g*u^2+d*u+qa*f,u),
    block([result:[],u1:-rhs(usols[1]),u2:-rhs(usols[2])],
      if integerp(u1) then push(diophantine_solve_linear(x, y, qa, qc, u1)[1], result),
      if integerp(u2) then push(diophantine_solve_linear(x, y, qa, qc, u2)[1], result),
      result))
  else block([un:abs(qcdqae),u,result:[]],
    for u:0 thru un do block(
      if mod(qa*g*u^2+d*u+qa*f,qc*d-qa*e) = 0 then block([
        xv:qc*g*(qa*e-qc*d)*dio_gensym()^2-(e+2*qc*g*u)*dio_gensym()-(qc*g*u^2+e*u+qc*f)/qcdqae,
        yv:qa*g*qcdqae*dio_gensym()^2+(d+2*qa*g*u)*dio_gensym()+(qa*g*u^2+d*u+qa*f)/qcdqae],
        push([x = xv, y = yv], result))),
          reverse(result)));

square_divisors(N):=block([result:[]],
  for f:1 thru isqrt(N) do
  if mod(N,f^2) = 0 then push(f,result),
  reverse(result));

/* lmm as described in "Solving the generalized Pell equation" 2004 by John P. Robertson, http://www.jpr2718.org/pell.pdf */
dio_lmm(x,y,D,N):=block([result:[]],
  for f in square_divisors(N) do block([m:N/f^2],
    /*print(['f=f,'m=m]),*/
    for z:truncate(-abs(m)/2) thru truncate(abs(m)/2) do
    block([],
      /*print('z=z,'mod(z^2,abs(m))=mod(z^2,abs(m)),'mod(D,abs(m))=mod(D,abs(m))),*/
      if mod(z^2,abs(m)) = mod(D,abs(m)) then block([pqa:do_pqa(z,abs(m),D),qi,i:1,r,s,found:false],
        /*print('pqa=pqa),*/
        for qi in rest(pqa@q) do block([],
          i:i+1,
          if not found and abs(qi)=1 then block([],
            found:true,
            r:pqa@g[i-1],
            s:pqa@b[i-1],
            if r^2-D*s^2=m then block([],
              /*print([adding,['r=r,'s=s]]),*/
              push([x=f*r,y=f*s],result))
            else block([t,u,sols],
              sols:dio_min_pos_pell_solution(t,u,D,-1),
              if not length(sols)=0 then block([],
                /*print('sols=sols,'r=r),*/
                push(subst(sols,[x=f*(r*t+s*u*D),y=f*(r*u+s*t)]),result)))))))),
  result);

diophantine_solve_hyperbolic_homogenous(x, y, a, b, c, f):=block([],
  if a = 0 then
  diophantine_solve_hyperbolic_homogenous(y,x,c,b,a,f)
  else block([b2m4ac:b^2-4*a*c,isq],
  isq:isqrt(b2m4ac),
  if isq^2 = b2m4ac then block(
    if (f = 0) then
    append(diophantine_solve(2*a*x+ (b + isq)*y), diophantine_solve(2*a*x+(b - isq)*y))
    else block([divs:listify(divisors(-4*a*f))],
      dio_integer_expressions(x = (u-(b+isq)*(u+4*a*f/u)/2/isq)/2/a, y = (u + 4*a*f/u)/2/isq, [u, append(divs, -1*divs)])))
  else block([g:gcd(gcd(a,b),c)],
    if integerp(f/g) then  block([a:a/g,b:b/g,c:c/g,f:f/g],
      if (b = 0) then block([],
        if ((f = 1) or (f = -1) or (f = 4) or (f = -4)) then block([],
          if (c < 0) and (a = 1) then
          ratsimp(dio_all_pell_solutions(x,y,-c,-f))
          elseif (a < 0) and (c = 1) then
          ratsimp(dio_all_pell_solutions(y,x,-a,-f))
          elseif a=-1 then diophantine_solve(-a*x*x-c*y*y-f)
          else dio_solve_with_transform(x,y,a,0,c,0,0,f,dio_make_a_one_transform))
        elseif (a = 1 and c < 0) or (c = 1 and a < 0) then
        block([r,s,t,u,fundamental_solutions,pell_1_solutions,D: if a = 1 then -c else -a],
          fundamental_solutions: dio_lmm(r,s,D,-f),
          pell_1_solutions: dio_all_pell_solutions(t, u, D, 1),
          block([eq:if a = 1 then [x=r*t+s*u*D, y=r*u+s*t] else [y=r*t+s*u*D, x=r*u+s*t],result:[]],
            for pell_1_solution in pell_1_solutions do
            for fundamental_solution in fundamental_solutions do
            push(subst(append(fundamental_solution, pell_1_solution),eq),result),
            result))
        elseif (a=-1 or c=-1) then diophantine_solve(-a*x^2-c*y^2-f)
        else dio_solve_with_transform(x,y,a,0,c,0,0,f,dio_make_a_one_transform))
      else dio_solve_with_transform(x,y,a,b,c,0,0,f,dio_make_b_zero_transform))
    else 'tbd2)));

dio_has_pn(expr):=if atom(expr) then is(expr='%n) else some(dio_has_pn,args(expr));
dio_infinite_solutions(sol):=dio_has_pn(sol);

remove_if(pred, list):=block([result:[],e],
  for e in list do if not pred(e) then push(e,result),
  reverse(result));

remove_if_not(pred, list):=block([result:[],e],
  for e in list do if pred(e) then push(e,result),
  reverse(result));

integer_solution_p(s):=integerp(rhs(s[1])) and integerp(rhs(s[2]));

remove_rat_sols(s):=remove_if_not(integer_solution_p, s);

dio_subst(sols,eq):=map(lambda([s],subst(s,eq)),sols);

dio_coeffs(eq):=block([vars:listofvars(eq)],
  if length(vars)=1 then vars:[vars[1],gensym()],
  if op(eq)="=" then eq:lhs(eq)-rhs(eq),
  ['a=coeff(eq,vars[1],2),'b=coeff(coeff(eq,vars[2]),vars[1]),'c=coeff(eq,vars[2],2),'d=coeff(coeff(eq,vars[1]),vars[2],0),'e=coeff(coeff(eq,vars[2]),vars[1],0),'f=coeff(coeff(eq,vars[1],0),vars[2],0)]);

dio_solve_with_transform(x,y,a,b,c,d,e,f,trfunc):=block([tr_eq,tr_eq_sol,tr,result],
  tr:trfunc(x,y,a,b,c,d,e,f),
  tr_eq:expand(subst(tr,a*x*x+b*x*y+c*y*y+d*x+e*y+f)),
  tr_eq:tr_eq*lcm(map(denom,map(rhs,dio_coeffs(tr_eq)))),
  tr_eq_sol:diophantine_solve(expand(tr_eq)),
  result:map(lambda([s],subst(s,tr)),tr_eq_sol),
  if dio_infinite_solutions(result) then result else remove_rat_sols(result));
dio_make_b_zero_transform(x,y,a,b,c,d,e,f):=if a=0 then dio_make_b_zero_transform(y,x,c,b,a,e,d,f) else
block([A,B,C,T,e1,e2,X:gensym("X"),Y:gensym("Y")],
  e1:2*a/b, B:ratnum(e1), C:denom(e1),
  e2:a/B^2, A:ratnum(e2), T:denom(e2),
  [x=1/B*X-C/B*Y,y=Y]);
dio_make_d_zero_transform(x,y,a,b,c,d,e,f):=block([A,B,C,T,e1,e2,X:gensym("X"),Y:gensym("Y")],
  e1:2*a/d, B:ratnum(e1), C:denom(e1),
  e2:a/B^2, A:ratnum(e2), T:denom(e2),
  [x=1/B*X-C/B,y=Y]);
dio_make_e_zero_transform(x,y,a,b,c,d,e,f):=dio_make_d_zero_transform(y,x,c,b,a,e,d,f);
dio_make_a_one_transform(x,y,a,b,c,d,e,f):=block([X:gensym("X"),Y:gensym("Y")],
  [x=X/a,y=Y]);
dio_apply_transform(eq,transform_name):=block([vars:listofvars(eq),coeffs:map(rhs,dio_coeffs(eq)),new_eq,transform],
  transform:apply(transform_name,append(vars,coeffs)),
  new_eq:expand(subst(transform,eq)));  /*,
  expand(apply(lcm,map(rhs,dio_coeffs(new_eq))))*/

dio_filter_rat_solutions(solutions, final_transform):=if not dio_infinite_solutions(solutions) then remove_rat_sols(solutions) else
block([sol,result:[],limit],
  limit:apply(lcm,map(denom,apply(append,map(args,map(rhs,final_transform))))), /* lcm of denominators of terms of the transforms */
  for sol in solutions do block([first:false, second:false,n],
    for n:0 while n < limit and not integerp(second) do (
      if integer_solution_p(ratsimp(subst(%n=n,sol))) then (
        if not integerp(first) then first:n elseif not integerp(second) then second:n,
        n:n+1)),
    if integerp(first) then (
      if not integerp(second) then error(I_didnt_think_this_could_happen)
      else
      push(subst(%n=(second-first)*%n+first,sol),result))),
  result);
diophantine_solve_hyperbolic(x, y, a, b, c, d, e, f):=block(
  if d = 0 and e = 0 then (
    diophantine_solve_hyperbolic_homogenous(x, y, a, b, c, f))
  else block([eq:a*x*x+b*x*y+c*y*y+d*x+e*y+f,transforms,new_eq,final_transform,transformed_eq,transformed_sols,eq_sols_rat],
    transforms:diophantine_compute_transforms_to_pell(eq),
    final_transform:dio_combine_transforms(transforms),
    transformed_eq:expand(subst(final_transform,eq)),
    transformed_sols:diophantine_solve(dio_make_coeffs_integer(transformed_eq)),
    eq_sols_rat:map(lambda([s],ratsimp(subst(s,final_transform))),transformed_sols),
    dio_filter_rat_solutions(eq_sols_rat, final_transform)));

defstruct(pqa(pp,g,b,q));
do_pqa(p,q,d):=block([result:dio_pqa(p,q,d)],
  new(pqa(subst(result,'pp),
      /* skip elements -2 and -1 in g and b */
          rest(rest(subst(result,'g))),
          rest(rest(subst(result,'b))),
          subst(result,'q))));

perfect_squarep(D):=block([iqd:isqrt(D)],is(D-iqd*iqd=0));

dio_min_pos_pell_solution_1(x,y,D,rhs):=block([pqa:do_pqa(0,1,D),period_length],
      period_length:length(pqa@pp),
      if evenp(period_length) then block([],
        if rhs=-1 then []
        elseif rhs=1 then [x=pqa@g[period_length], y = pqa@b[period_length]])
      else block([], /* period_length is odd */
        if rhs=-1 then [x=pqa@g[period_length], y = pqa@b[period_length]]
        elseif rhs=1 then block([x1:pqa@g[period_length],y1:pqa@b[period_length]], [x=D*y1^2+x1^2,y=2*x1*y1])));

dio_min_pos_pell_solution_4(x,y,D,rhs):=block([],
      if mod(D,4)=1 then block([pqa:do_pqa(1,2,D),period_length],
        period_length:length(pqa@pp),
        if evenp(period_length) then block([],
          if rhs=-4 then []
          elseif rhs=4 then [x=pqa@g[period_length], y = pqa@b[period_length]])
        else block([], /* period_length is odd */
          if rhs=-4 then [x=pqa@g[period_length], y = pqa@b[period_length]]
          elseif rhs=4 then block([x1:pqa@g[period_length],y1:pqa@b[period_length]], [x=1/2*(D*y1^2+x1^2),y=x1*y1])))
      elseif mod(D,4)=0 then block([sol1:dio_min_pos_pell_solution(x,y,D/4,rhs/4)],
          if length(sol1)>0 then [x=rhs(sol1[1])*2,sol1[2]] else []
          )
        elseif mod(D,4)=2 or mod(D,4)=3 then block([sol1:dio_min_pos_pell_solution(x,y,D,rhs/4)],
          if length(sol1)>0 then [x=rhs(sol1[1])*2,y=rhs(sol1[2])*2] else []));

dio_min_pos_pell_solution(x,y,D,rhs):=
    if perfect_squarep(D) then
    [] /* can't use pqa to solve this type, should be handled in a different way */
    elseif rhs=1 or rhs=-1 then dio_min_pos_pell_solution_1(x,y,D,rhs)
    elseif rhs=4 or rhs=-4 then dio_min_pos_pell_solution_4(x,y,D,rhs);

dio_all_pell_solutions(x,y,D,rhs):=block([min_sol:dio_min_pos_pell_solution(x,y,D,rhs)],
  if length(min_sol) > 0 then block([t:subst(min_sol,x),u:subst(min_sol,y)],
    if rhs=1 then block([t1:(t+u*sqrt(D))^dio_gensym(),t2:(t-u*sqrt(D))^dio_gensym()],
      [[x=1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)], [x=-1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)]])
    elseif rhs=-1 then block([t1:(t+u*sqrt(D))^(2*dio_gensym()+1), t2:(t-u*sqrt(D))^(2*dio_gensym()+1)],
      [[x=1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)], [x=1/2*(t1+t2), y=-1/2/sqrt(D)*(t1-t2)]])
    elseif rhs=4 then block([t1:(t+u*sqrt(D))^dio_gensym()/(2^(dio_gensym()-1)), t2:(t-u*sqrt(D))^dio_gensym()/(2^(dio_gensym()-1))],
      [[x=1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)], [x=-1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)]])
    elseif rhs=-4 then block([t1:(t+u*sqrt(D))^(2*dio_gensym()+1)/(2^(2*dio_gensym())), t2:(t-u*sqrt(D))^(2*dio_gensym()+1)/(2^(2*dio_gensym()))],
      [[x=1/2*(t1+t2), y=1/2/sqrt(D)*(t1-t2)], [x=-1/2*(t1+t2), y=-1/2/sqrt(D)*(t1-t2)]]))
  else []);

dio_solution_magnitude_less_p(s1,s2):=rhs(s1[1])^2+rhs(s1[2])^2 < rhs(s2[1])^2+rhs(s2[2])^2;

diophantine_instantiate_solutions(parametrised_results, nmin, nmax,[rest]):=
block([result_list:ratsimp(apply(append,map(lambda([param_result],makelist(subst(%n=i,param_result),i,nmin,nmax)), parametrised_results)))],
  if member('sorted,rest) then
    result_list:sort(result_list,dio_solution_magnitude_less_p),
  if member('integer,rest) then
    result_list:remove_rat_sols(result_list),
  if member('no_eq,rest) then
    result_list:map(lambda([s],[rhs(s[1]),rhs(s[2])]),result_list),
  result_list);

diophantine_solve(dio_eq) := nested_sort(diophantine_solve1(dio_eq));

nested_sort (l) :=
  if listp(l)
    then sort (map (lambda ([l1], if listp(l1) then sort(l1) else l1), l))
    else l;

diophantine_solve1(dio_eq):=if op(dio_eq) = "=" then diophantine_solve1(lhs(dio_eq)-rhs(dio_eq)) else
block([vars:listofvars(dio_eq)],
  if length(vars) > 2 then error (dio_error_2_vars, vars)
  elseif length(vars) = 1 then return(diophantine_solve_single_var(dio_eq))
  elseif length(vars) = 0 then error(dio_error_no_unknowns),
  block([x:vars[1],y:vars[2]],
    if (hipow(dio_eq, x)>2 or hipow(dio_eq, y)>2) then
      error(dio_error_hi_pow)
    else
    block([a:coeff(dio_eq,x^2),
      b:coeff(coeff(dio_eq,x),y),
      c:coeff(dio_eq, y^2),
      d:subst(y=0, coeff(dio_eq, x)),
      e:subst(x=0,coeff(dio_eq,y)),
      f:subst([x=0,y=0],dio_eq)],
      if not every(integerp, {a,b,c,d,e,f}) then
        error (dio_error_integer_coeffs)
      else block([],
        map(":",['a,'b,'c,'d,'e,'f],rest(ezgcd(a,b,c,d,e,f))),
        if (a = 0 and b = 0 and c = 0) then
          diophantine_solve_linear(x, y, d, e, f)
        elseif (a = 0 and c = 0 and b # 0) then
          diophantine_solve_simple_hyperbolic(x, y, b, d, e, f)
        elseif b^2-4*a*c < 0 then
          diophantine_solve_elliptic(x, y, a, b, c, d, e, f)
        elseif b^2-4*a*c = 0 then
          diophantine_solve_parabolic(x, y, a, b, c, d, e, f)
        else
          diophantine_solve_hyperbolic(x, y, a, b, c, d, e, f)))));

