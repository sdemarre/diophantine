load(draw);
load(diophantine);

dio_make_points_data(dio_points_result):=block(
  map(lambda([p],[rhs(p[1]),rhs(p[2])]), dio_points_result));

dio_make_points_labels(point_data, dx, dy):=block(
  apply(label,map(lambda([p],[string(p), p[1]+dx, p[2]+dy]), point_data)));

dio_draw_data(eq, xmin, xmax, ymin, ymax, label_dx, label_dy, point_data, label_data):=block(
    wxdraw2d(font="Helvetica", font_size=20, yrange=[ymin, ymax], title=string(eq), xaxis=true, yaxis=true, ip_grid=[200,200],ip_grid_in=[10,10],
    implicit(eq, listofvars(eq)[1], xmin, xmax, listofvars(eq)[2], ymin, ymax),
    point_size=5, color=red, point_type=circle, points(point_data),
    point_size=2, color=green, point_type=filled_circle, points(point_data),
    color=black, label_data));

dio_draw_finite(eq, xmin, xmax, ymin, ymax, label_dx, label_dy):=block([solutions, point_data, label_data],
  solutions:diophantine_solve(eq),
  point_data:dio_make_points_data(solutions),
  label_data:dio_make_points_labels(point_data, label_dx, label_dy),
  dio_draw_data(eq, xmin, xmax, ymin, ymax, label_dx, label_dy, point_data, label_data));

dio_draw_infinite(eq, nmin, nmax, label_dx, label_dy, border):=block([solutions, point_data, label_data, point_ranges],
  solutions:diophantine_solve(eq),
  point_data:dio_make_points_data(diophantine_instantiate_solutions(solutions, nmin, nmax)),
  label_data:dio_make_points_labels(point_data, label_dx, label_dy),
  point_ranges:[-border,border,-border,border]+dio_point_ranges(point_data),
  dio_draw_data(eq, point_ranges[1], point_ranges[2], point_ranges[3], point_ranges[4], label_dx, label_dy, point_data, label_data));

dio_has_pn(expr):=if atom(expr) then is(expr='%n) else some(dio_has_pn,args(expr));
dio_infinite_solutions(sol):=dio_has_pn(sol);
dio_scale_range(range,scale):=block([xsize:range[2]-range[1],ysize:range[4]-range[3],xmid,ymid],
  xmid:range[1]+xsize/2,
  ymid:range[3]+ysize/2,
  [xmid - xsize/2*scale, xmid + xsize/2*scale, ymid - ysize/2*scale, ymid + ysize/2*scale]);
dio_draw(eq,[rest]):=block([sols:diophantine_solve(eq)],
  if not dio_infinite_solutions(sols) then block([point_ranges:dio_point_ranges(dio_make_points_data(sols)),new_range],
    new_range:dio_scale_range(point_ranges,1.2),
    dio_draw_finite(eq,new_range[1],new_range[2],new_range[3],new_range[4],(new_range[2]-new_range[1])/30,(new_range[4]-new_range[3])/25))
  else block([limits:if length(rest)=2 then rest else [-1,1],points,range,new_range,points],
    points:diophantine_instantiate_solutions(sols,limits[1],limits[2]),
    print(points),
    range:dio_point_ranges(dio_make_points_data(points)),
    print(range),
    dio_draw_infinite(eq,limits[1],limits[2],(range[2]-range[1])/30,(range[4]-range[3])/25,(range[2]-range[1])/10)));

dio_draw_example():=dio_draw(2*x*y+56*y+5*x+7=0);

dio_draw_example2():=dio_draw_finite(42*x*x+8*x*y+15*y*y+23*x+17*y-4915=0, -12, 12, -20, 20,  1, 2);

dio_draw_example3():=dio_draw_finite(-2*y^2-5*x*y+3*x^2-6=0, -4, 4, -4, 4, 1/2, 1/2);

dio_draw_example4():=dio_draw_infinite(18*y^2-24*x*y+7*y+8*x^2+5*x+16=0, -3, 3, 150, 10, 100);

dio_draw_example5():=dio_draw_infinite(x^2-5*y^2=-1,-2,1,1,1,10);

dio_draw_example6():=dio_draw_infinite(x^2-5*y^2=1,-1,1,1,1,10);

dio_draw_example7():=dio_draw(13*y^2+16*x*y-306*y+5*x^2-190*x+1214);

dio_draw_example8():=dio_draw((-11*y^2)+6*x*y-70*y-x^2+24*x+169);