load(diophantine_draw);
dio_trace():=trace(dio_all_pell_solutions,
  dio_gen_euclid,
  dio_make_b_zero_transform, dio_make_d_zero_transform, dio_make_a_one_transform,
  dio_solve_with_transform,
  diophantine_solve_linear,
  diophantine_solve_simple_hyperbolic,
  diophantine_solve_elliptic,
  diophantine_solve_parabolic,
  diophantine_solve_hyperbolic_homogenous,
  diophantine_solve_hyperbolic,
  diophantine_solve);

dio_rand(n):=random(n)-floor(n/2);

dio_random_eq(n):=block([a,b,c,d,e,f],
  map(":",[a,b,c,d,e,f],makelist(dio_rand(n),i,1,6)),
  a*x^2+b*x*y+c*y^2+d*x+e*y+f);

eqs_with_solutions(eqns,min_solutions):=block([result:[],eq],
  for eq in eqns do block(
    if not atom(eq[2]) and length(eq[2]) > min_solutions then
    push(eq,result)),
  reverse(result));

find_interesting_equations(coeff_max, num_candidates, min_solutions):=
block([candidates:makelist(dio_random_eq(2*coeff_max),i,1,num_candidates)],
  sort(eqs_with_solutions(map(lambda([eq],[eq,diophantine_solve(eq)]),candidates),min_solutions),lambda([eq1,eq2],length(eq1[2])>length(eq2[2]))));

diophantine_brute_force(eq,limit,[rest]):=block([coeffs:dio_coeffs(eq),vars:listofvars(eq),sln],
  sln:map(lambda([s],[vars[1]=s[1],vars[2]=s[2]]),apply(dio_brute_force,append(map(rhs,coeffs),[limit]))),
  if member('sorted,rest) then sort(sln,dio_solution_magnitude_less_p) else sln);

dio_compute_transform_if(eq,condition,transform):=block([vars:listofvars(eq),coeffs:dio_coeffs(eq),t],
  if is(subst(coeffs,condition)) then (
    t:subst(coeffs,'apply(transform,[vars[1],vars[2],a,b,c,d,e,f])),
    ev(t,nouns))
  else
    []);

dio_make_coeffs_integer(eq):=expand(lcm(map(denom,map(rhs,dio_coeffs(eq))))*eq);
diophantine_compute_transforms_to_pell(eq):=block([cur_eq:eq,transforms:[]],
  transform:dio_compute_transform_if(cur_eq,'b#0,dio_make_b_zero_transform), print('cur_eq=cur_eq), cur_eq:expand(subst(transform, cur_eq)),print('transform=transform), print('new_eq=cur_eq),
  if not emptyp(transform) then push(transform, transforms), cur_eq:dio_make_coeffs_integer(cur_eq),
  transform:dio_compute_transform_if(cur_eq,'d#0,dio_make_d_zero_transform), print('cur_eq=cur_eq), cur_eq:expand(subst(transform, cur_eq)),print('transform=transform), print('new_eq=cur_eq),
  if not emptyp(transform) then push(transform, transforms), cur_eq:dio_make_coeffs_integer(cur_eq),
  transform:dio_compute_transform_if(cur_eq,'e#0,dio_make_e_zero_transform), print('cur_eq=cur_eq), cur_eq:expand(subst(transform, cur_eq)),print('transform=transform), print('new_eq=cur_eq),
  if not emptyp(transform) then push(transform, transforms), cur_eq:dio_make_coeffs_integer(cur_eq),
  transform:dio_compute_transform_if(cur_eq,'a#1,dio_make_a_one_transform), print('cur_eq=cur_eq), cur_eq:expand(subst(transform, cur_eq)),print('transform=transform), print('new_eq=cur_eq),
  if not emptyp(transform) then push(transform, transforms),
  transforms);

diophantine_apply_transforms(transforms, eq):=block([transform,new_eq:eq],
  for transform in reverse(transforms) do
  new_eq:subst(transform,new_eq),
  new_eq);

dio_reset_vars(eq):=block([vars:listofvars(eq)],
  subst([vars[1]='x,vars[2]='y],eq));

make_b_zero(eq):=block([t:dio_compute_transform_if(eq, 'b#0, dio_make_b_zero_transform)],  [t,dio_reset_vars(expand(subst(t,eq)))]);
make_d_zero(eq):=block([t:dio_compute_transform_if(eq, 'd#0, dio_make_d_zero_transform)],  [t,dio_reset_vars(expand(subst(t,eq)))]);
make_e_zero(eq):=block([t:dio_compute_transform_if(eq, 'e#0, dio_make_e_zero_transform)],  [t,dio_reset_vars(expand(subst(t,eq)))]);
make_a_one(eq):=block([t:dio_compute_transform_if(eq, 'a#1, dio_make_a_one_transform)],  [t,dio_reset_vars(expand(subst(t,eq)))]);


find_eq_with_powers():=block([eq:dio_random_eq(10),s,M],
  global_eq:eq,
  s:ratsimp(diophantine_solve(eq)),
  if s#[] and dio_infinite_solutions(s) then block([tftable,counts],
    tftable:map(lambda([sol],map(integer_solution_p,sol)),makelist(ratsimp(subst(%n=i,s)),i,0,20)),
    counts:map(lambda([l],?count(true,l)),args(transpose(apply(matrix,tftable)))),
    [eq,counts])
  else [eq,not_interesting]);


/* remove_if(lambda([d],d[2]=not_interesting),makelist(find_eq_with_powers(),i,0,20)); */