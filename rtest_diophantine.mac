
/* ******************** single variable */
kill(r,s,x,y,p,%n);
done$

diophantine_solve(2*y+12);
[[y=-6]]$

diophantine_solve(3*p-12);
[[p=4]]$

diophantine_solve(19*r-32);
[]$

diophantine_solve(expand((q-3)*(q+5)));
[[q=-5],[q=3]]$

diophantine_solve(7*x*x-4*x-3);
[[x=1]]$


/* ******************** linear*/

diophantine_solve(-9*x+12*y);
[[x = 4*%n,y = 3*%n]]$

diophantine_solve(5*x-15*y+7);
[]$

diophantine_solve(10*r+84*s+16);
[[r=42*%n-10,s=1-5*%n]]$

diophantine_solve(3*x+2*y-8);
[[x=2*%n+2,y=1-3*%n]]$


/* ******************** simple hyperbolic */

diophantine_solve(3*x*y+9*y+4*x+12);
[[x = -3,y = %n]]$

diophantine_solve(21*x*y+12*y+7*x+4);
[]$

diophantine_solve(7*x*y+12*y+7*x+12);
[[x = %n,y = -1]]$

diophantine_solve(2*x*y+5*x+56*y+7);
[[x = - 161, y = - 3], [x = - 47, y = - 6], [x = - 35, y = - 12], 
[x = - 29, y = - 69], [x = - 27, y = 64], [x = - 21, y = 7], [x = - 9, y = 1], 
[x = 105, y = - 2]]$


/* ******************** elliptic */

diophantine_solve(42*x*x+8*x*y+15*y*y+23*x+17*y-4915);
[[x = -11,y = -1]]$


/* ******************** parabolic */


diophantine_solve(9*y^2+12*x*y+3*y+4*x^2+2*x);
[[x = 3*%n, y = - 2*%n], [x = 3*%n + 1, y = (- 2*%n) - 1]] $

diophantine_solve(18*y^2-24*x*y+7*y+8*x^2+5*x+16);
[[x = (-174*%n^2)+17*%n-2,y = (-116*%n^2)+21*%n-2], [x = (-174*%n^2)+41*%n-4,y = (-116*%n^2)+37*%n-4]]$

diophantine_solve(9*y^2+12*x*y-2*y+4*x^2+4*x+3);
[]$

diophantine_solve(5*y^2+10*x*y+16*y+5*x^2+16*x-7);
[]$

/* ******************** hyperbolic */
diophantine_solve(4*x^2-y^2-x+y+1);
[[x=-1,y=-2],[x=-1,y=3]]$

diophantine_solve((-2*y^2)-5*x*y+3*x^2);
[[x = %n,y = -3*%n],[x = 2*%n,y = %n]]$

diophantine_solve((-2*y^2)-5*x*y+3*x^2-6);
[[x=-1,y=1],[x=1,y=-1]]$

diophantine_solve(-x^2+a*x-2=0);
[[a = -3,x = -2],[a = -3,x = -1],[a = 3,x = 1],[a = 3,x = 2]]$

diophantine_solve(10*y^2-20*x*y-15);
[]$

diophantine_solve(2*x^2-3*y^2=1);
[]$

ratsimp(diophantine_solve(y^2+x*y-y-3*x^2+2*x+1));
''(ratsimp([[x = ((180*sqrt(13)+649)^(2*%n)*(238*sqrt(13)-858)
    +(238*(649-180*sqrt(13))^(2*%n)+5)*sqrt(13)+858*(649-180*sqrt(13))^(2*%n))
    /13^(3/2),
  y = -((86*sqrt(13)-310)*(180*sqrt(13)+649)^(2*%n)
    -86*(649-180*sqrt(13))^(2*%n)*sqrt(13)-310*(649-180*sqrt(13))^(2*%n)-4)
    /13],
 [x = -((180*sqrt(13)+649)^(2*%n)*(308902*sqrt(13)+1113762)
    +(308902*(649-180*sqrt(13))^(2*%n)-5)*sqrt(13)
    -1113762*(649-180*sqrt(13))^(2*%n))
    /13^(3/2),
  y = -((180*sqrt(13)+649)^(2*%n)*(111614*sqrt(13)+402430)
    -111614*(649-180*sqrt(13))^(2*%n)*sqrt(13)
    +402430*(649-180*sqrt(13))^(2*%n)-4)
    /13],
 [x = (4*(180*sqrt(13)+649)^(2*%n)+4*(649-180*sqrt(13))^(2*%n)+5)/13,
  y = -((2*sqrt(13)+2)*(180*sqrt(13)+649)^(2*%n)
    -2*(649-180*sqrt(13))^(2*%n)*sqrt(13)+2*(649-180*sqrt(13))^(2*%n)-4)
    /13],
 [x = -((22*sqrt(13)+78)*(180*sqrt(13)+649)^(2*%n)
    +(22*(649-180*sqrt(13))^(2*%n)-5)*sqrt(13)-78*(649-180*sqrt(13))^(2*%n))
    /13^(3/2),
  y = -((8*sqrt(13)+28)*(180*sqrt(13)+649)^(2*%n)
    -8*(649-180*sqrt(13))^(2*%n)*sqrt(13)+28*(649-180*sqrt(13))^(2*%n)-4)
    /13],
 [x = -((180*sqrt(13)+649)^(2*%n)*(720*sqrt(13)+2596)
    -720*(649-180*sqrt(13))^(2*%n)*sqrt(13)+2596*(649-180*sqrt(13))^(2*%n)-5)
    /13,
  y = -((180*sqrt(13)+649)^(2*%n)*(938*sqrt(13)+3382)
    -938*(649-180*sqrt(13))^(2*%n)*sqrt(13)+3382*(649-180*sqrt(13))^(2*%n)-4)
    /13],
 [x = ((180*sqrt(13)+649)^(2*%n)*(238*sqrt(13)+858)
    +(238*(649-180*sqrt(13))^(2*%n)+5)*sqrt(13)-858*(649-180*sqrt(13))^(2*%n))
    /13^(3/2),
  y = -((152*sqrt(13)+548)*(180*sqrt(13)+649)^(2*%n)
    -152*(649-180*sqrt(13))^(2*%n)*sqrt(13)+548*(649-180*sqrt(13))^(2*%n)-4)
    /13]]))$

ratsimp(diophantine_solve(4*y^2-4*x*y-4*y-2*x^2+x-1));
''(ratsimp([[x = -((sqrt(3)+2)^(4*%n)*(5*sqrt(3)+12)
            +(5*(2-sqrt(3))^(4*%n)+2)*sqrt(3)-12*(2-sqrt(3))^(4*%n))
            /(4*3^(3/2)),
          y = -((sqrt(3)+2)^(4*%n)*(3^(5/2)+17)
            -(2-sqrt(3))^(4*%n)*3^(5/2)+17*(2-sqrt(3))^(4*%n)-10)
            /24],
         [x = -((sqrt(3)+2)^(4*%n)*(5*sqrt(3)-12)
            +(5*(2-sqrt(3))^(4*%n)+2)*sqrt(3)+12*(2-sqrt(3))^(4*%n))
            /(4*3^(3/2)),
          y = -((sqrt(3)-7)*(sqrt(3)+2)^(4*%n)
            -(2-sqrt(3))^(4*%n)*sqrt(3)-7*(2-sqrt(3))^(4*%n)-10)
          /24]]))$

ratsimp(diophantine_solve(y^2-2*x*y-4*x^2+x));
''(ratsimp([[x = (2^((-12*%n)-2)*(2^(12*%n+1)-(sqrt(5)+1)^(12*%n)
                                          -(1-sqrt(5))^(12*%n)))
            /5,
          y = (2^((-12*%n)-2)*(2^(12*%n+1)+((-sqrt(5))-1)*(sqrt(5)+1)^(12*%n)
                                          +(1-sqrt(5))^(12*%n)*sqrt(5)
                                          -(1-sqrt(5))^(12*%n)))
            /5],
         [x = (2^((-12*%n)-2)*(2^(12*%n+1)+(sqrt(5)+1)^(12*%n)*(4*sqrt(5)+9)
                                          -4*(1-sqrt(5))^(12*%n)*sqrt(5)
                                          +9*(1-sqrt(5))^(12*%n)))
            /5,
          y = (2^((-12*%n)-2)*(2^(12*%n+1)+(sqrt(5)+1)^(12*%n)*(13*sqrt(5)+29)
                                          -13*(1-sqrt(5))^(12*%n)*sqrt(5)
                                          +29*(1-sqrt(5))^(12*%n)))
            /5]]));


diophantine_solve(x^2+11*x*y-11*y^2-12*x-y-1);
[]$

diophantine_solve(x^2+10*x*y-11*y^2-12*x-y-1);
[[x = -11,y = -12],[x = 143,y = -12]]$


/* slow */
diophantine_solve(14*y^2+90*x*y-82*y+3*x^2-25*x-26);
[]$

ratsimp(diophantine_solve(-x^2+2*y^2+4))$
''(ratsimp([[x = -((2^(5/2)+6)^%n+(6-2^(5/2))^%n)/2^%n,
          y = ((2^(5/2)+6)^%n-(6-2^(5/2))^%n)*2^((-%n)-1/2)],
         [x = ((2^(5/2)+6)^%n+(6-2^(5/2))^%n)/2^%n,
          y = ((2^(5/2)+6)^%n-(6-2^(5/2))^%n)*2^((-%n)-1/2)]]))$


/* miscellaneous encountered problems */

/* very very slow */
/*diophantine_solve(-55*y^2-29*x*y-60*y+24*x^2-54*x+85);
[]$*/

/* divide by zero */
diophantine_solve(-2*y^2-x*y-4*y+2*x-2);
[[x = -49,y = 20],[x = -32,y = 3],[x = -32,y = 11],[x = -27,y = 8],
 [x = -25,y = 4],[x = -24,y = 5],[x = 0,y = -1],[x = 1,y = 0],[x = 3,y = -4],
 [x = 8,y = -7],[x = 8,y = 1],[x = 25,y = -16]]$



/* THESE ARE EXPECTED TO FAIL !!!!! */

/* duplicate solutions, due to y=+-0 */
diophantine_solve(x^2+2*y^2=16);
[[x=-4,y=0],[x=4,y=0]]$

/* should be solved as 2 linears, but is handled by hyperbolic (degenerate case ?), not all solutions are generated */
diophantine_solve(3*x^2+x*y-x);
[[x=0,y=%n],[x=-%n,y=3*%n+1]]$

/* some unhandled case when filtering out rational solutions */
diophantine_solve((-2*y^2)+2*x*y-3*y+2*x^2+3*x-1);
[]$
/* rational solutions, why? */
diophantine_solve(3*x*x-2*x*y-7*y*y=12);
[]$

diophantine_solve(9*y^2-4*x*y+9*y-10*x^2-10*x-6);
[]$
