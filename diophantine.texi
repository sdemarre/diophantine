@c NOTE: This template.texi shows how to create a texinfo file that is
@c incorporated into maxima.info. See template-standalone.texi for a
@c texinfo file which is accessed apart from maxima.info.

@c NOTE: To bring MYTOPIC into maxima.info, you need to make references
@c to MYTOPIC in 3 places. Search for "lbfgs" in maxima.texi for an example.
@c
@c 1. Under the heading "Additional packages" (line 139 at the moment)
@c    Here you put "MYTOPIC:: Transmogrification a la Smith and Jones."
@c
@c 2. Under the heading "The Detailed Node Listing" (line 178 at the moment)
@c    Here you copy the @menu which is defined in this file.
@c
@c 3. In the @node list (line 544 at the moment)
@c    You MUST fix up the preceding and succeeding @nodes when you
@c    create a new @node MYTOPIC.
@c
@c    @node PRECEDINGTOPIC, MYTOPIC, PRECEDINGPRECEDINGTOPIC, Top
@c    @chapter PRECEDINGTOPIC
@c    @include PRECEDINGTOPIC.texi
@c
@c    @node MYTOPIC, NEXTTOPIC, PRECEDINGTOPIC, Top
@c    @chapter MYTOPIC
@c    @include MYTOPIC.texi
@c
@c    @node NEXTTOPIC, NEXTNEXTTOPIC, MYTOPIC, Top
@c    @chapter NEXTTOPIC
@c    @include NEXTTOPIC.texi


@menu
* Introduction to diophantine::
* Functions and Variables for diophantine::
@end menu

@node Introduction to diophantine, Functions and Variables for MYTOPIC, Top, Top
@section Introduction to diophantine

@code{diophantine} is package to solve diophantine equations of the form @math{ax^2+bxy+cy^2+dx+ey+f=0} with @math{a,b,c,d,e} and @math{f} integer coefficients, @math{x} and @math{y} the variables which can only take integer values.

@node Functions and Variables for diophantine, Introduction to diophantine, Top
@section Functions and Variables for diophantine

@deffn {diophantine_solve} (@var{equation})

Computes solutions for the @code{equation}. The result is always a list, which can be empty if no solutions exist. Sometimes, there are infinitely many solutions, so a parametrized representation is used. The parameter is of the form @math{%zi} for an integer parameter or @math{%ni} for a natural (positive) parameter. Both are suitably declared with @code{new_variable('integer)} or @code{new_variable('natural)} from the @code{to_poly_solve} package.

@end deffn

@deffn {diophantine_instantiate_solutions} (@var{solution}, @var{param_first}, [@var{param_last}, @var{option}])

Given a parametrized @code{solution} from @code{diophantine_solve}, will compute all the actual solutions, with the parameter varying from @code{param_first} to @code{param_last} (which defaults to @code{param_first}). If @code{option} is @code{'sorted}, the list of solutions will be sorted by increasing (sum of the squares of the values).

@end deffn
